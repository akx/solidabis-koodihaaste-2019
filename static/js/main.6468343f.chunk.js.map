{"version":3,"sources":["hooks/useRemoteBullshit.tsx","utils/caesar.ts","utils/decodeBullshit.ts","components/Controls.tsx","components/BullshitTableRow.tsx","components/BullshitTable.tsx","App.tsx","index.tsx"],"names":["a","bullshitResp","require","bullshits","map","b","message","useRemoteBullshit","React","useState","undefined","bullshitList","setBullshitList","useEffect","fetchBullshit","then","shits","finnishShiftTables","keyspaces","maxShift","length","tables","shift","shiftTable","forEach","keyspace","i","push","generateShiftTables","caesar","s","shiftTables","Error","chars","join","finnishNgrams","Set","finnishNgramsLengths","computeNgramScore","lengths","validSet","nTotal","nValid","sub","substring","exec","has","toLowerCase","decodeBullshit","bs","shiftResults","result","score","original","Controls","threshold","setThreshold","setBullshits","newPhrase","setNewPhrase","className","toFixed","type","min","max","step","value","onChange","e","target","valueAsNumber","onSubmit","phrase","trim","newBullshits","concat","preventDefault","BullshitTableRow","bestResult","sr","BullshitTable","decodedBullshits","key","App","remoteBullshits","newDecodedBullshits","find","dbs","decodeRemoteBullshitList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6468343f.chunk.js","sourcesContent":["import React from \"react\";\n\nasync function fetchBullshit(): Promise<readonly string[]> {\n  // The API server does not allow the CORS preflight OPTIONS request,\n  // so the following doesn't work.  Instead of bothering with a backend to proxy this request without\n  // CORS constraints, the author has opted to include the response data in the repository.\n  /*\n  const secretResp = await fetch('https://koodihaaste-api.solidabis.com/secret');\n  const { bullshitUrl, jwtToken } = await secretResp.json();\n  const bullshitResp = await fetch(bullshitUrl, {\n    headers: {\n      Authorization: `Bearer ${jwtToken}`,\n    },\n  });\n  const { bullshits } = await bullshitResp.json();\n  */\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const bullshitResp = require(\"../data/api-response.json\");\n  const { bullshits } = bullshitResp;\n  return bullshits.map((b: { message: string }) => b.message);\n}\n\nexport default function useRemoteBullshit() {\n  const [bullshitList, setBullshitList] = React.useState<\n    readonly string[] | undefined\n  >(undefined);\n  React.useEffect(() => {\n    fetchBullshit().then(shits => setBullshitList(shits));\n  }, []);\n  return bullshitList;\n}\n","interface ShiftTable {\n  [s: string]: string;\n}\n\ninterface ShiftTables {\n  tables: ShiftTable[];\n  maxShift: number;\n}\n\nfunction generateShiftTables(keyspaces: readonly string[]): ShiftTables {\n  const maxShift = keyspaces[0].length;\n  const tables = [];\n  for (let shift = 0; shift < maxShift; shift++) {\n    const shiftTable: ShiftTable = {};\n    keyspaces.forEach(keyspace => {\n      for (let i = 0; i < keyspace.length; i++) {\n        shiftTable[keyspace[i]] = keyspace[(i + shift) % keyspace.length];\n      }\n    });\n    tables.push(shiftTable);\n  }\n  return { tables, maxShift };\n}\n\nexport const finnishShiftTables = generateShiftTables([\n  \"abcdefghijklmnopqrstuvwxyzåäö\",\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ\",\n]);\n\nexport function caesar(s: string, shift: number, shiftTables: ShiftTables) {\n  if (shift < 0 || shift >= shiftTables.maxShift) {\n    throw new Error(\"Invalid shift value.\");\n  }\n  const shiftTable = shiftTables.tables[shift];\n  const chars = [];\n  for (let i = 0; i < s.length; i++) {\n    chars.push(shiftTable[s[i]] || s[i]);\n  }\n  return chars.join(\"\");\n}\n","import { caesar, finnishShiftTables } from \"./caesar\";\nimport { DecodedBullshit, ShiftResult } from \"../types\";\n\n// Most common ngrams from the most common Finnish words.\nconst finnishNgrams: Set<string> = new Set(require(\"../data/ngrams.json\"));\n// Lengths of ngrams in the ngram set.\nconst finnishNgramsLengths = [4, 5];\n// Carefully tuned initial detection threshold\nexport const initialDetectionThreshold = 0.141;\n\nfunction computeNgramScore(\n  s: string,\n  lengths: readonly number[],\n  validSet: Set<string>,\n): number {\n  let nTotal = 0;\n  let nValid = 0;\n  lengths.forEach(length => {\n    for (let i = 0; i < s.length - length; i++) {\n      const sub = s.substring(i, i + length);\n      if (/^[a-zåäö]+$/i.exec(sub)) {\n        nTotal++;\n        if (validSet.has(sub.toLowerCase())) {\n          nValid++;\n        }\n      }\n    }\n  });\n  return nValid / nTotal;\n}\n\nexport function decodeBullshit(bs: string): DecodedBullshit {\n  const shiftResults: ShiftResult[] = [];\n  for (let shift = 0; shift < finnishShiftTables.maxShift; shift++) {\n    const result = caesar(bs, shift, finnishShiftTables);\n    const score = computeNgramScore(\n      result,\n      finnishNgramsLengths,\n      finnishNgrams,\n    );\n    shiftResults.push({ shift, result, score });\n  }\n  return { original: bs, shiftResults };\n}\n\nexport function decodeRemoteBullshitList(\n  remoteBullshits: readonly string[],\n  bullshits: readonly DecodedBullshit[],\n) {\n  const newDecodedBullshits: DecodedBullshit[] = [];\n  (remoteBullshits || []).forEach(bs => {\n    if (!bullshits.find(dbs => dbs.original === bs)) {\n      newDecodedBullshits.push(decodeBullshit(bs));\n    }\n  });\n  return newDecodedBullshits;\n}\n","import React from \"react\";\nimport { decodeBullshit } from \"../utils/decodeBullshit\";\nimport { DecodedBullshit } from \"../types\";\n\ninterface ControlsProps {\n  threshold: number;\n  setThreshold: (n: number) => void;\n  bullshits: readonly DecodedBullshit[];\n  setBullshits: (bs: DecodedBullshit[]) => void;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n  threshold,\n  setThreshold,\n  bullshits,\n  setBullshits,\n}) => {\n  const [newPhrase, setNewPhrase] = React.useState<string>(\"\");\n  return (\n    <div className=\"controls\">\n      <label>\n        Detection Threshold [{threshold.toFixed(3)}\n        ]:\n        <input\n          type=\"range\"\n          min={0}\n          max={0.5}\n          step={0.001}\n          value={threshold}\n          onChange={e => setThreshold(e.target.valueAsNumber)}\n        />\n      </label>\n      <form\n        onSubmit={e => {\n          const phrase = newPhrase.trim();\n          if (phrase.length) {\n            const newBullshits = [decodeBullshit(phrase)].concat(bullshits);\n            setBullshits(newBullshits);\n            setNewPhrase(\"\");\n          }\n          e.preventDefault();\n          return false;\n        }}\n      >\n        Add new bullshit:{\" \"}\n        <input value={newPhrase} onChange={e => setNewPhrase(e.target.value)} />\n        <button type=\"submit\">OK</button>\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { DecodedBullshit, ShiftResult } from \"../types\";\n\ninterface BullshitTableRowProps {\n  bs: DecodedBullshit;\n  threshold: number;\n}\n\nexport const BullshitTableRow: React.FC<BullshitTableRowProps> = ({\n  bs,\n  threshold,\n}) => {\n  let bestResult: ShiftResult | undefined;\n  bs.shiftResults.forEach(sr => {\n    if (!bestResult || sr.score >= bestResult.score) {\n      bestResult = sr;\n    }\n  });\n  if (bestResult && bestResult.score >= threshold) {\n    return (\n      <tr className=\"no-bullshit\">\n        <td>{bestResult.result}</td>\n        <td>{bestResult.score.toFixed(4)}</td>\n        <td>{bestResult.shift}</td>\n      </tr>\n    );\n  } else {\n    return (\n      <tr className=\"is-bullshit\">\n        <td>{bs.original}</td>\n        <td className=\"best-bs-score\">\n          {bestResult ? bestResult.score.toFixed(4) : null}\n        </td>\n        <td />\n      </tr>\n    );\n  }\n};\n","import React from \"react\";\nimport { BullshitTableRow } from \"./BullshitTableRow\";\nimport { DecodedBullshit } from \"../types\";\n\ninterface BullshitTableProps {\n  decodedBullshits: readonly DecodedBullshit[];\n  threshold: number;\n}\n\nexport const BullshitTable: React.FC<BullshitTableProps> = ({\n  decodedBullshits,\n  threshold,\n}) => (\n  <table>\n    <thead>\n      <tr>\n        <th>Phrase</th>\n        <th>Score</th>\n        <th>Shift</th>\n      </tr>\n    </thead>\n    {decodedBullshits.map(bs => (\n      <BullshitTableRow bs={bs} threshold={threshold} key={bs.original} />\n    ))}\n  </table>\n);\n","import React from \"react\";\nimport useRemoteBullshit from \"./hooks/useRemoteBullshit\";\nimport {\n  decodeRemoteBullshitList,\n  initialDetectionThreshold,\n} from \"./utils/decodeBullshit\";\nimport { Controls } from \"./components/Controls\";\nimport { BullshitTable } from \"./components/BullshitTable\";\nimport { DecodedBullshit } from \"./types\";\n\nconst App: React.FC = () => {\n  const remoteBullshits = useRemoteBullshit();\n  const [bullshits, setBullshits] = React.useState<DecodedBullshit[]>([]);\n  const [threshold, setThreshold] = React.useState<number>(\n    initialDetectionThreshold,\n  );\n  React.useEffect(() => {\n    // Update the decoded bullshits state when remote bullshit is received.\n    const newDecodedBullshits =\n      remoteBullshits !== undefined\n        ? decodeRemoteBullshitList(remoteBullshits, bullshits)\n        : [];\n    if (newDecodedBullshits.length !== 0) {\n      setBullshits(bullshits.concat(newDecodedBullshits));\n    }\n  }, [bullshits, remoteBullshits]);\n\n  return (\n    <>\n      <Controls\n        threshold={threshold}\n        setThreshold={setThreshold}\n        bullshits={bullshits}\n        setBullshits={setBullshits}\n      />\n      <BullshitTable decodedBullshits={bullshits} threshold={threshold} />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}